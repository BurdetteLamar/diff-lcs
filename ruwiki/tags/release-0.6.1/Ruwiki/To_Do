id: 0
topic: To_Do
version: 1
#EHDR
= Ruwiki 0.6.1 To Do Tracking
Completed to-do items can be found in the ChangeLog. Bugs in Ruwiki are
tracked in BugTracking.

== Well-Defined To Do Items
=== Ruwiki 0.7.0
; Versioning : complete the change history. Change history is currently stored in a file <i>topic</i>.rdiff. There is no way to display the change history at this point.
=== Ruwiki 0.8.0
; In-project topic search : searches for mentions of the topic in the other topics for the project.
; Project topic listing : provide a special link (perhaps Project::Project) that displays the list of topics known to that project.
; Project listing : provide a special link (perhaps ::*) that displays the list of known projects.
=== Ruwiki 0.9.0
; Topic renaming : add the ability to rename a topic within a project. Topic change history should be maintained.
; Topic moving : add the ability to move and/or rename a topic between projects. Topic change history should be maintained.
; Complete documentation : Complete the documentation of Ruwiki.
=== Ruwiki 1.0.0
; Escape HTML Entities : HTML Entities such as &amp;, &lt;, and &gt; are not currently escaped. This may cause problems with some browsers and should be fixed <b>without</b> impairing the ability to add at least some raw HTML. Note that the current engine does not check raw HTML and thus could potentially be vulnerable to cross-site-scripting attacks.
; Features : Ruwiki will be programmatically extensible with entirely new features: commands, ACLs, and more. This is planned for 1.0.0.

== General To Do Items
; Preview button : add a preview button to the save page.
; Alternative templating systems : not as high priority now that there's a real templating system in place.
; Project/topic security : allow certain projects to be restricted/authenticated for read/write based on user.
; Track last <i>n</i> links/topics : ?
; Write a markup debugger : ?
; Validate topic formatting from cgi : ?
; Validate project from cgi : ?
; Project-based backend : Allow different projects to have different backends.
; Hierachical project namespaces : ?

== Future To Do Items
; E-mail gateway : accept topic appends via e-mail.
; alternative backends : access other wiki data storage, or other formats, e.g. e-mail boxes in mh or mbox formats
; backend-to-backend storage format conversion : as noted
; bug tracker backend : with alternate markup
; add setup and user config methods : for backend plugin classes, then we can use them with an interactive or gui tool frontend to setup data storage backends. The user might have to run as root or other user with database create permissions.
; add id="" to various markup elements (make id specific to topic) : Later we can allow users to tweak a page using uploaded css fragments which might get appended onto the standard css contents. 
; ruby action : upload a ruby code fragment to add a smart "action" to that wiki page. Need some sort of security + approval system to handle this safely.
