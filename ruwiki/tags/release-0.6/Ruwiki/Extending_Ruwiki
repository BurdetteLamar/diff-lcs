id: 0
topic: Extending_Ruwiki
version: 1
#EHDR
= Extending Ruwiki 0.6.0

Ruwiki is relatively easily extended to support new features. There are two
primary ways in which Ruwiki can be extended by the end user: markup and
backends.

== Extending Ruwiki Markup

Ruwiki's WikiMarkup can be extended by creating a new Ruwiki::Wiki::Token.
Tokens will be automatically loaded if they are placed in
<i>ruwiki/wiki/tokens</i>.

The
following Ruwiki::Wiki::Token class will convert strings in the forms of
\[ruby-talk:12345] to links.

  class RubyTalkLinks < Ruwiki::Wiki::Token
    def self.rank
      2
    end

    def self.regexp
      %r{\[ruby-talk:(\d+)\]}
    end

    def replace
      lm = @match.captures[0]
      %Q(<a class="rw_extlink" href="http://www.ruby-talk.org/#{lm}">#{@match[0]}</a>)
    end
  end

=== Required Methods
==== ::regexp

Ruwiki tokens are matched only through regular expression matches. As shown in
the example above, the regular expression for ruby-talk mailing list posts is
<tt>%r{\[ruby-talk:(\d+)\]}</tt>. The purpose of the ::regexp method is to
return the regexp for matching.

For most inline matches, Ruwiki will ensure that the escape character (\)
works automatically. For whole-line matches, it is necessary to match the
escape character manually and provide a #restore method.

As an example, the HRule class implements these methods.

  def self.regexp
    %r|^\\?-{4,}|
  end

  def restore
    @match[0][1 .. -1]
  end

It may also be necessary to match escapes manually on inline matches that must
be along word boundaries where the regular expression includes characters that
normally match word boundaries. The project index match (e.g., \::Ruwiki)
regular expression does this <tt>%r{(\B|\\)::([A-Z][a-z]+)}</tt>.

==== #replace

This returns the formatted token. In the \RubyTalkLinks class above, the
matched regular expression will be replaced with a hyperlink. The text of the
hyperlink will be the matched text; the target of the hyperlink will include
the first captured value.

  def replace
    lm = @match.captures[0]
    %Q(<a class="rw_extlink" href="http://www.ruby-talk.org/#{lm}">#{@match[0]}</a>)
  end

=== Optional Methods
==== ::rank

By default, a token will be processed in the order created. Tokens may be
given a specific rank to ensure that they are processed in a particular order.
The default rank is <tt>9999</tt>.

==== #restore

Restores the token without replacement. Implements the results of the escape
character. Each Token class is responsible for its own restoration. As noted
in #regexp, whole-line tokens are most likely to need a #restore
implementation.

==== #post_replace

Performs any necessary massaging of the data. The Lists token uses this to
ensure that lists are collapsed together; the Paragraph token uses this to
ensure that there are no empty paragraph tag pairs (&lt;p&gt;&lt;/p&gt;).

== Extending Ruwiki Backends

Ruwiki can support varying backends, as the backend interface has been
abstracted completely from the data store. The backend <b>must</b>:

# reside in <i>ruwiki/backends/</i> as <i>backend_name</i>.rb.
# be registered by adding the <i>backend_name</i> as a symbol (e.g., :<i>backend_name</i>) to Ruwiki::Backend::BACKENDS.
# inherit from Ruwiki::Backend.
# exist as Ruwiki::Backend::<i>\Backend_name</i>.

=== Required Methods
==== #initialize(ruwiki)

The backend may only obtain its configuration information from the provided
ruwiki instance (through Ruwiki#config) and must set @ruwiki (this can be
achieved by calling <tt>super ruwiki</tt>).

==== #load(topic, project)

The backend will be provided the name of the topic and project and must return
the selected page as an array, one row per line. If the backend you have
chosen returns the page as a single text block, it will be necessary to do a
String#split("\n") on it.

==== #save(page)

This method must store the provided page in the backend. Note that the return
value of the Page#rawtext method must be stored. This method may call
Backend#make_diff to generate the differences hash.

  diff = {
    'old_version' => page.old_version,
    'new_version' => page.version,
    'change_date' => Time.now,
    'change_ip'   => page.change_ip,
    'change_id'   => page.change_id,
    'diff'        => Diff.diff(oldpage, newpage)
  }

==== #obtain_lock(page)

Obtains an exclusive lock on the page. The lock should have a ten minute (600
second) timeout and permit access from the same IP address without
restriction. This should <b>not</b> be a filesystem lock.

==== #release_lock(page)

Releases the exclusive lock on the page. The lock should not be released
unless the IP address on the lock is the same or the lock has expired (600
seconds).

==== #project_exists?(project)

Returns <tt>true</tt> if the project exists.

==== #page_exists?(topic, project = 'Default')
Returns <tt>true</tt> if the page exists within the specified project.

=== Optional Methods

Note that these methods are currently optional (they are not yet called from
Ruwiki), but will become required moving forward as the functions are
implemented in Ruwiki.

==== #destroy(page)

Removes the page from the wiki. This should <b>not</b> remove the change
history of the topic (in the event that the page has been removed
maliciously). There will be a separate method to remove the page history.

==== #create_project(project)

Attempts to create the project.

==== #destroy_project(project)

Attempts to destroy the project.
